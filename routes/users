const { Router } = require('express');
const Yup = require('yup');
const Validator = require('fastest-validator');

const router = new Router();
const User = require('../models/User');

const validator = new Validator();

// const registerSchema = Yup.object().shape({
//     fullname: Yup.string()
//         .required("نام و نام خانوادگی الزامی می باشد")
//         .min(4, "نام و نام خانوادگی نباید کمتر از 4 کاراکتر باشد")
//         .max(255, "نام و نام خانوادگی نباید بیشتر از 255 کاراکتر باشد"),
//     email: Yup.string()
//         .email("ایمیل معتبر نمی باشد")
//         .required("ایمیل الزامی می باشد"),
//     password: Yup.string()
//         .min(4, "کلمه عبور نباید کمتر از 4 کاراکتر باشد")
//         .max(255, "کلمه عبور نباید بیشتر از 255 کاراکتر باشد")
//         .required("کلمه عبور الزامی می باشد"),
//     confirmPassword: Yup.string()
//         .required("تکرار کلمه عبور الزامی می باشد")
//         .oneOf([Yup.ref("password"), null]),
// });

const schema = {
    fullname: {
        type: "string",
        trim: true,
        min: 4,
        max: 255,
        optional: false,
        messages: {
            required: "نام و نام خانوادگی الزامی می باشد",
            stringMin: "نام و نام خانوادگی نباید کمتر از 4 کاراکتر باشد",
            stringMax: "نام و نام خانوادگی نباید بیشتر از 255 کاراکتر باشد",
        }
    },
    email: {
        type: "email",
        normalize: true,
        messages: {
            emailEmpty: "فیلد ایمیل نباید خالی باشد",
            required: "ایمیل الزامی می باشد",
            string: "آدرس ایمیل را بررسی کنید",
        },
    },
    password: {
        type: "string",
        min: 4,
        max: 255,
        messages: {
            required: "کلمه عبور الزامی می باشد",
            string: "کلمه عبور را بررسی کنید",
            stringMin: "کلمه عبور نباید کمتر از 4 کاراکتر باشد",
            stringMax: "کلمه عبور نمی تواند بیشتر از 255 کاراکتر باشد",
        },
    },
    confirmPassword: {
        type: "string",
        min: 4,
        max: 255,
        messages: {
            required: "تکرار کلمه عبور الزامی می باشد",
            string: "تکرار کلمه عبور را بررسی کنید",
            stringMin: "تکرار کلمه عبور نباید کمتر از 4 کاراکتر باشد",
            stringMax: "تکرار کلمه عبور نباید بیشتر از 255 کاراکتر باشد",
        },
    },
    $$strict: true,
};



// @desc Login Page
// @route GET /users/login
router.get("/login", (req, res) => {
    res.render("login", {
        pageTitle: "صفحه ورود",
        path: "/login"
    })
});

// @desc  GET Register Page
// @route  GET /users/register
router.get("/register", (req, res) => {
    res.render("register", {
        pageTitle: "ثبت نام کاربر",
        path: "/register"
    });

});

// @desc Login Handle
// @route POST /users/login
router.post("/login", (req, res) => {
    if (req.body) {
        console.log(req.body);

    }
});

// @desc Register Handle
// @route POST /users/register
router.post("/register", async(req, res) => {
    if (req.body) {
        // const validator = await registerSchema.isValid(req.body);
        // validator ? res.redirect("/") : res.send("Something went wrong!!")

        //OR ( Yup )

        // registerSchema.validate(req.body)
        //     .then(result => {
        //         res.redirect("/users/login")

        //     }).catch(err => {
        //         // console.log(err);
        //         // for (let error of err.errors) {
        //         //     console.log(error);
        //         // }
        //         res.render("register", {
        //             pageTitle: "ثبت نام کاربر",
        //             errors: err.errors,
        //             path: "/register"
        //         })
        //     })

        // OR ( fastest validator )
        const validate = validator.validate(req.body, schema);
        const errorArr = [];
        if (validate === true) {
            const { fullname, email, password, confirmPassword } = req.body;
            if (password != confirmPassword) {
                errorArr.push({ message: "کلمه های عبور یکسان نیستند" });
                return res.render("register", {
                    pageTitle: "ثبت نام کاربر",
                    path: "/register",
                    errors: errorArr
                });
            }
            res.redirect("users/login");
        } else {

            return res.render("register", {
                pageTitle: "ثبت نام کاربر",
                path: "/register",
                errors: validate
            });

        }
    }
});

module.exports = router;